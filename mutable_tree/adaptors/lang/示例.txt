    # 示例 1：基本字面量匹配
    value = 2
    match value:
        case 1:
            print("Value is 1")
        case 2:
            print("Value is 2")
        case _:
            print("Value is something else")

    # 示例 2：变量匹配
    name = "Alice"
    match name:
        case "Bob":
            print("Hello Bob!")
        case "Alice":
            print("Hello Alice!")
        case _:
            print("Hello stranger!")

    # 示例 3：序列解构
    point = (1, 2)
    match point:
        case (0, 0):
            print("Origin")
        case (x, 0):
            print(f"On the x-axis at x={x}")
        case (0, y):
            print(f"On the y-axis at y={y}")
        case (x, y):
            print(f"Point is at ({x}, {y})")
        case _:
            print("Not a point")

    # 示例 4：类匹配
    class Point:
        x: int
        y: int

    p = Point()
    p.x = 1
    p.y = 2

    match p:
        case Point(x=0, y=0):
            print("Origin")
        case Point(x=x_val, y=0):
            print(f"On the x-axis at x={x_val}")
        case Point(x=0, y=y_val):
            print(f"On the y-axis at y={y_val}")
        case Point():
            print("Point is somewhere else")
        case _:
            print("Not a Point")

    # 示例 5：组合匹配
    shape = ("circle", 5)
    match shape:
        case ("circle", radius):
            print(f"Circle with radius {radius}")
        case ("rectangle", width, height):
            print(f"Rectangle with width {width} and height {height}")
        case ("square", size) if size > 0:
            print(f"Square with size {size}")
        case _:
            print("Unknown shape")

    # 示例 6：匹配剩余元素
    numbers = [1, 2, 3, 4, 5]
    match numbers:
        case [first, second, *rest]:
            print(f"First: {first}, Second: {second}, Rest: {rest}")
        case _:
            print("Not a list with at least two elements")


module
  comment
  expression_statement
    assignment
      identifier [left]
      =
      integer [right]
  match_statement
    match
    identifier [subject]
    :
    block [body]
      case_clause [alternative]
        case
        case_pattern
          integer
        :
        block [consequence]
          expression_statement
            call
              identifier [function]
              argument_list [arguments]
                (
                string
                  string_start
                  string_content
                  string_end
                )
      case_clause [alternative]
        case
        case_pattern
          integer
        :
        block [consequence]
          expression_statement
            call
              identifier [function]
              argument_list [arguments]
                (
                string
                  string_start
                  string_content
                  string_end
                )
      case_clause [alternative]
        case
        case_pattern
          _
        :
        block [consequence]
          expression_statement
            call
              identifier [function]
              argument_list [arguments]
                (
                string
                  string_start
                  string_content
                  string_end
                )
  comment
  expression_statement
    assignment
      identifier [left]
      =
      string [right]
        string_start
        string_content
        string_end
  match_statement
    match
    identifier [subject]
    :
    block [body]
      case_clause [alternative]
        case
        case_pattern
          string
            string_start
            string_content
            string_end
        :
        block [consequence]
          expression_statement
            call
              identifier [function]
              argument_list [arguments]
                (
                string
                  string_start
                  string_content
                  string_end
                )
      case_clause [alternative]
        case
        case_pattern
          string
            string_start
            string_content
            string_end
        :
        block [consequence]
          expression_statement
            call
              identifier [function]
              argument_list [arguments]
                (
                string
                  string_start
                  string_content
                  string_end
                )
      case_clause [alternative]
        case
        case_pattern
          _
        :
        block [consequence]
          expression_statement
            call
              identifier [function]
              argument_list [arguments]
                (
                string
                  string_start
                  string_content
                  string_end
                )
  comment
  expression_statement
    assignment
      identifier [left]
      =
      tuple [right]
        (
        integer
        ,
        integer
        )
  match_statement
    match
    identifier [subject]
    :
    block [body]
      case_clause [alternative]
        case
        case_pattern
          tuple_pattern
            (
            case_pattern
              integer
            ,
            case_pattern
              integer
            )
        :
        block [consequence]
          expression_statement
            call
              identifier [function]
              argument_list [arguments]
                (
                string
                  string_start
                  string_content
                  string_end
                )
      case_clause [alternative]
        case
        case_pattern
          tuple_pattern
            (
            case_pattern
              dotted_name
                identifier
            ,
            case_pattern
              integer
            )
        :
        block [consequence]
          expression_statement
            call
              identifier [function]
              argument_list [arguments]
                (
                string
                  string_start
                  string_content
                  interpolation
                    {
                    identifier [expression]
                    }
                  string_end
                )
      case_clause [alternative]
        case
        case_pattern
          tuple_pattern
            (
            case_pattern
              integer
            ,
            case_pattern
              dotted_name
                identifier
            )
        :
        block [consequence]
          expression_statement
            call
              identifier [function]
              argument_list [arguments]
                (
                string
                  string_start
                  string_content
                  interpolation
                    {
                    identifier [expression]
                    }
                  string_end
                )
      case_clause [alternative]
        case
        case_pattern
          tuple_pattern
            (
            case_pattern
              dotted_name
                identifier
            ,
            case_pattern
              dotted_name
                identifier
            )
        :
        block [consequence]
          expression_statement
            call
              identifier [function]
              argument_list [arguments]
                (
                string
                  string_start
                  string_content
                  interpolation
                    {
                    identifier [expression]
                    }
                  string_content
                  interpolation
                    {
                    identifier [expression]
                    }
                  string_content
                  string_end
                )
      case_clause [alternative]
        case
        case_pattern
          _
        :
        block [consequence]
          expression_statement
            call
              identifier [function]
              argument_list [arguments]
                (
                string
                  string_start
                  string_content
                  string_end
                )
  comment
  class_definition
    class
    identifier [name]
    :
    block [body]
      expression_statement
        assignment
          identifier [left]
          :
          type [type]
            identifier
      expression_statement
        assignment
          identifier [left]
          :
          type [type]
            identifier
  expression_statement
    assignment
      identifier [left]
      =
      call [right]
        identifier [function]
        argument_list [arguments]
          (
          )
  expression_statement
    assignment
      attribute [left]
        identifier [object]
        .
        identifier [attribute]
      =
      integer [right]
  expression_statement
    assignment
      attribute [left]
        identifier [object]
        .
        identifier [attribute]
      =
      integer [right]
  match_statement
    match
    identifier [subject]
    :
    block [body]
      case_clause [alternative]
        case
        case_pattern
          class_pattern
            dotted_name
              identifier
            (
            case_pattern
              keyword_pattern
                identifier
                =
                integer
            ,
            case_pattern
              keyword_pattern
                identifier
                =
                integer
            )
        :
        block [consequence]
          expression_statement
            call
              identifier [function]
              argument_list [arguments]
                (
                string
                  string_start
                  string_content
                  string_end
                )
      case_clause [alternative]
        case
        case_pattern
          class_pattern
            dotted_name
              identifier
            (
            case_pattern
              keyword_pattern
                identifier
                =
                dotted_name
                  identifier
            ,
            case_pattern
              keyword_pattern
                identifier
                =
                integer
            )
        :
        block [consequence]
          expression_statement
            call
              identifier [function]
              argument_list [arguments]
                (
                string
                  string_start
                  string_content
                  interpolation
                    {
                    identifier [expression]
                    }
                  string_end
                )
      case_clause [alternative]
        case
        case_pattern
          class_pattern
            dotted_name
              identifier
            (
            case_pattern
              keyword_pattern
                identifier
                =
                integer
            ,
            case_pattern
              keyword_pattern
                identifier
                =
                dotted_name
                  identifier
            )
        :
        block [consequence]
          expression_statement
            call
              identifier [function]
              argument_list [arguments]
                (
                string
                  string_start
                  string_content
                  interpolation
                    {
                    identifier [expression]
                    }
                  string_end
                )
      case_clause [alternative]
        case
        case_pattern
          class_pattern
            dotted_name
              identifier
            (
            )
        :
        block [consequence]
          expression_statement
            call
              identifier [function]
              argument_list [arguments]
                (
                string
                  string_start
                  string_content
                  string_end
                )
      case_clause [alternative]
        case
        case_pattern
          _
        :
        block [consequence]
          expression_statement
            call
              identifier [function]
              argument_list [arguments]
                (
                string
                  string_start
                  string_content
                  string_end
                )
  comment
  expression_statement
    assignment
      identifier [left]
      =
      tuple [right]
        (
        string
          string_start
          string_content
          string_end
        ,
        integer
        )
  match_statement
    match
    identifier [subject]
    :
    block [body]
      case_clause [alternative]
        case
        case_pattern
          tuple_pattern
            (
            case_pattern
              string
                string_start
                string_content
                string_end
            ,
            case_pattern
              dotted_name
                identifier
            )
        :
        block [consequence]
          expression_statement
            call
              identifier [function]
              argument_list [arguments]
                (
                string
                  string_start
                  string_content
                  interpolation
                    {
                    identifier [expression]
                    }
                  string_end
                )
      case_clause [alternative]
        case
        case_pattern
          tuple_pattern
            (
            case_pattern
              string
                string_start
                string_content
                string_end
            ,
            case_pattern
              dotted_name
                identifier
            ,
            case_pattern
              dotted_name
                identifier
            )
        :
        block [consequence]
          expression_statement
            call
              identifier [function]
              argument_list [arguments]
                (
                string
                  string_start
                  string_content
                  interpolation
                    {
                    identifier [expression]
                    }
                  string_content
                  interpolation
                    {
                    identifier [expression]
                    }
                  string_end
                )
      case_clause [alternative]
        case
        case_pattern
          tuple_pattern
            (
            case_pattern
              string
                string_start
                string_content
                string_end
            ,
            case_pattern
              dotted_name
                identifier
            )
        if_clause [guard]
          if
          comparison_operator
            identifier
            > [operators]
            integer
        :
        block [consequence]
          expression_statement
            call
              identifier [function]
              argument_list [arguments]
                (
                string
                  string_start
                  string_content
                  interpolation
                    {
                    identifier [expression]
                    }
                  string_end
                )
      case_clause [alternative]
        case
        case_pattern
          _
        :
        block [consequence]
          expression_statement
            call
              identifier [function]
              argument_list [arguments]
                (
                string
                  string_start
                  string_content
                  string_end
                )
  comment
  expression_statement
    assignment
      identifier [left]
      =
      list [right]
        [
        integer
        ,
        integer
        ,
        integer
        ,
        integer
        ,
        integer
        ]
  match_statement
    match
    identifier [subject]
    :
    block [body]
      case_clause [alternative]
        case
        case_pattern
          list_pattern
            [
            case_pattern
              dotted_name
                identifier
            ,
            case_pattern
              dotted_name
                identifier
            ,
            case_pattern
              splat_pattern
                *
                identifier
            ]
        :
        block [consequence]
          expression_statement
            call
              identifier [function]
              argument_list [arguments]
                (
                string
                  string_start
                  string_content
                  interpolation
                    {
                    identifier [expression]
                    }
                  string_content
                  interpolation
                    {
                    identifier [expression]
                    }
                  string_content
                  interpolation
                    {
                    identifier [expression]
                    }
                  string_end
                )
      case_clause [alternative]
        case
        case_pattern
          _
        :
        block [consequence]
          expression_statement
            call
              identifier [function]
              argument_list [arguments]
                (
                string
                  string_start
                  string_content
                  string_end
                )