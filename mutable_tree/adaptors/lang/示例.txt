# 示例1：处理除零错误
try:
    a = 10
    b = 0
    result = a / b
    print(f"结果是：{result}")
except ZeroDivisionError:
    print("错误：除数不能为零！")
except Exception as e:
    print(f"发生未知错误：{e}")

# 示例2：处理索引错误
try:
    my_list = [1, 2, 3]
    print(my_list[3])
except IndexError:
    print("错误：索引超出范围！")
except Exception as e:
    print(f"发生未知错误：{e}")

# 示例3：使用else和finally
try:
    print("尝试执行代码块")
    # 如果没有异常发生，执行else
except Exception as e:
    print(f"发生错误：{e}")
else:
    print("没有发生异常，执行else块")
finally:
    print("无论是否发生异常，finally块都会执行")




module
  comment
  try_statement
    try
    :
    block [body]
      expression_statement
        assignment
          identifier [left]
          =
          integer [right]
      expression_statement
        assignment
          identifier [left]
          =
          integer [right]
      expression_statement
        assignment
          identifier [left]
          =
          binary_operator [right]
            identifier [left]
            / [operator]
            identifier [right]
      expression_statement
        call
          identifier [function]
          argument_list [arguments]
            (
            string
              string_start
              string_content
              interpolation
                {
                identifier [expression]
                }
              string_end
            )
    except_clause
      except
      identifier
      :
      block
        expression_statement
          call
            identifier [function]
            argument_list [arguments]
              (
              string
                string_start
                string_content
                string_end
              )
    except_clause
      except
      as_pattern
        identifier
        as
        as_pattern_target [alias]
          identifier
      :
      block
        expression_statement
          call
            identifier [function]
            argument_list [arguments]
              (
              string
                string_start
                string_content
                interpolation
                  {
                  identifier [expression]
                  }
                string_end
              )
  comment
  try_statement
    try
    :
    block [body]
      expression_statement
        assignment
          identifier [left]
          =
          list [right]
            [
            integer
            ,
            integer
            ,
            integer
            ]
      expression_statement
        call
          identifier [function]
          argument_list [arguments]
            (
            subscript
              identifier [value]
              [
              integer [subscript]
              ]
            )
    except_clause
      except
      identifier
      :
      block
        expression_statement
          call
            identifier [function]
            argument_list [arguments]
              (
              string
                string_start
                string_content
                string_end
              )
    except_clause
      except
      as_pattern
        identifier
        as
        as_pattern_target [alias]
          identifier
      :
      block
        expression_statement
          call
            identifier [function]
            argument_list [arguments]
              (
              string
                string_start
                string_content
                interpolation
                  {
                  identifier [expression]
                  }
                string_end
              )
  comment
  try_statement
    try
    :
    block [body]
      expression_statement
        call
          identifier [function]
          argument_list [arguments]
            (
            string
              string_start
              string_content
              string_end
            )
      comment
    except_clause
      except
      as_pattern
        identifier
        as
        as_pattern_target [alias]
          identifier
      :
      block
        expression_statement
          call
            identifier [function]
            argument_list [arguments]
              (
              string
                string_start
                string_content
                interpolation
                  {
                  identifier [expression]
                  }
                string_end
              )
    else_clause
      else
      :
      block [body]
        expression_statement
          call
            identifier [function]
            argument_list [arguments]
              (
              string
                string_start
                string_content
                string_end
              )
    finally_clause
      finally
      :
      block
        expression_statement
          call
            identifier [function]
            argument_list [arguments]
              (
              string
                string_start
                string_content
                string_end
              )